rethink,reshape,reenergize
反思、重塑、重振


CDN:私有传输协议（主要是提供加速服务，负责边缘计算）
Content Delivery Network
内容包括静态内容和动态内容（利用头部的cache-control来确定是否保存、保存多久等）
通过负载均衡来抵抗针对CDN的DDoS攻击（任播技术）


介绍了天地一体化网络传输、应用与实验床相关研究的最新进展
重点介绍了未来星地云平台的高效融合带来的新机遇
同时，介绍了团队在实验仿真、融合互联和应用部署上的最近进展

Cooperatively Constructing Cost-Effective Content Distribution Networks upon Emerging Low Earth Orbit Satellites and Clouds.
在新兴的低地球轨道卫星和云层上合作构建具有成本效益的内容分发网络。
在应用层和传输层中添加束层


Cost-Effective CDN upon LEO satellites and clouds
在LEO卫星和云上实现经济高效的CDN

judiciously place contents and assign cache servers to global users
明智地放置内容并将缓存服务器分配给全局用户

解释：
低地（球）轨道/近地（球）轨道（LEO：Low Earth Orbit ）
　　轨道高度约为400-2000公里
　　绝大多数对地观测卫星、测地卫星、空间站以及一些新的通信卫星系统都采用近地轨道


文献阅读：

本文介绍了好处、可行性、挑战
	STARFRONT（以可接受的成本满足应用程序的各种延迟要求）

原本CDN提供高可用性和低访问延迟            承载大量网络流量
问题：虽然CDN网络提供商提供的离得近，但访问时间依然很长（这些问题在地面网络中都不容易解决：1.维护成本高；
																																															地面部署在很大程度上受到地理因素（如地形）或大规模运营和维护成本的限制，尤其是在发展不足的地区
																																										2.路由策略不同
																																										）
解决：太空缓存：高通量通信组件和高容量存储器

新的问题：1.如何选择卫星；2.如何经济有效
新的解决：STARFRONT：协同利用LEO卫星和地面云中的缓存节点
		关键技术：1.构建了一个动态的卫星云拓扑结构（预测卫星轨迹）；2.为不同地区的用户提供了三种形式的分配
																														- 地面网络到云
																														- 卫星路线到云 走低延迟空间路线
																														- 卫星缓存（价格估计较贵）

成就：通过集成卫星和云，STARFRONT的性能优于现有的纯云方法，以可接受的运营成本满足应用程序的各种延迟要求


三个关键贡献：1.现有的延迟高；2.提出协同利用地面和卫星；3.测试想法的性能


CDN三个关键步骤：
					1.从源将数据推到地方缓存服务器；
					2.确定不同用户访问时用哪个缓存服务器；（配置映射）
					3.更新高速缓存服务器的数据。
					

测试：
		对所考虑的七个CDN中的每一个执行20多次ping测试，并收集最佳探测结果（访问延迟），以避免网络拥塞或临时链路故障对测量结果的影响


LEO:
									1.与在约36000公里的高度运行的传统地球静止卫星相比，低地球轨道星座也有望实现低延迟互联网连接
									2.光速在空气或真空中更快


机会：
						1.高通量组件；
						2.太空存储
						
						
						
						
可以帮助的点：
					1.建连接地面云和最终用户的低延迟、接近最佳的空间路径（但就需要计算最佳路径）
					2.低轨卫星上的缓存服务器（为即使是最近的云站点也离得太远的地区的用户提供更低的访问延迟）



尚未解决的挑战：
							1.稀缺且昂贵的空间资源；
							2.低轨卫星的高机动性。低轨卫星相对于地球高速移动，导致地面通信不稳定
							
							
							
							

STARFRONT：（根据卫星的网络拓扑结构，卫星运动的周期性和可预测性）
							1.如何从所有可用的云和卫星中选择一组缓存服务器以形成内容分发网络？（内容推送和放置）
							2.以及如何将来自不同地理分布区域的请求分配到适当的缓存服务器，同时不超过内容提供商的成本预算？（请求分配）



三个约束：
					1.每个区域必须在每个时隙中分配给一个缓存服务器
					2.对于每个选定的缓存服务器，至少有一个从源到其的路径
					3.请求分配应保持良好的延迟需求


成本：
					1.从源分发给缓存服务器的分发成本
					2.缓存服务器的存储成本
					3.运行时请求服务的带宽成本


随着。      卫星数量和用户请求的增加               ，实现的典型处理时间需要几分钟到几小时，这太长了，不实用。这促使我们设计和实施更高效、更适用的解决方案



启发式方法：
												满足应用程序级别的延迟要求，同时将带宽和存储成本降至最低
												
												
												
												
STARFRONT首先搜索能够满足访问延迟要求的所有可用云或卫星服务器（即候选服务器）的集合
在Candidate中的所有条目中，STARFRONT贪婪地选择涉及最小成本的服务器




要么无法模拟/仿真LEO卫星的高动态性。                      要么无法支持对真实内容分布的评估
需要模拟真实 且真的评估


控制器定期读取卫星位置信息和历史网络性能信息，并计算内容放置和请求分配的决策

卫星上的缓存可以进一步帮助减少延迟，但不可避免地会涉及更多的运营成本

具有较小对象大小的较小请求更容易实现延迟减少

OneWeb缺点：
						1.更高；
						2.没有卫星间链路；
						3.卫星密度低
						
						
对于具有非常严格延迟要求的高优先级区域或任务来说应该是值得的



想法：
				1.确定边缘节点存储哪些数据
				2.如何进行内容的分发和更新，动态卫星间路径的计算也是关键
				3.如何构建一个优秀的网络拓扑，利用神经网络端到端计算
				4.优化控制器的计算算法，更快的计算内容放置和请求分配的决策





















