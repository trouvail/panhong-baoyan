#include <iostream>
#include <iomanip>

using namespace std;

struct TreeNode
{
    int data;        //数据
    TreeNode* left;    //指向左孩子节点的指针
    TreeNode* right;   //指向右孩子节点的指针
 
    TreeNode(int dat, TreeNode* lft = nullptr, TreeNode* rig = nullptr):data(dat), left(lft), right(rig) {}
};

void inorderTraversal(TreeNode* root) 
{
    //根节点为空，直接返回
    if (nullptr == root)
    {
        return;
    }
    //1）遍历左子树
    inorderTraversal(root -> left);
    //2）输出
    cout << root -> data << endl;
    //3）遍历右子树
    inorderTraversal(root->right);
    return;
}


int main()
{
//    double s = 12.345;
//    cout << setiosflags(ios::fixed) << setprecision(2);
//    cout << s << endl;
    
    
//    cout << "Hello, World!\n";
    
//    int a = 2, b;
//    b = pow(2, 3);
//    b *= 2;
//    b = sqrt(b);
//    cout << b << endl;
    
//    TreeNode* a = new TreeNode(3);
//    TreeNode* b = new TreeNode(9);
//    TreeNode* c = new TreeNode(20);
//    TreeNode* d = new TreeNode(15);
//    TreeNode* e = new TreeNode(7);
//    
//    a -> left = b;
//    a -> right = c;
//    c -> left = d;
//    c -> right = e;
//    
//    inorderTraversal(a);
    
    int n;
    cin >> n;
    int l[100], r[100];
    TreeNode* pp[100];
    
    for(int i = 0; i < n; i++)
    {
        pp[i] = new TreeNode(i + 1);
        int a, b;
        cin >> a >> b;
        l[i] = a;
        r[i] = b;
    }
    
    for(int i = 0; i < n; i++)
    {
        if(l[i] != -1)
        {
            pp[i] -> left = pp[l[i] - 1];
        }
        if(r[i] != -1)
        {
            pp[i] -> right = pp[r[i] - 1];
        }
    }
    
    int queue1[10000] = {0};
    int t = 0; // 指针
    
    queue1[0] = 1;
    t++;
    
    while(t != 0)
    {
        int mid = queue1[0];
        if(pp[mid - 1] -> left != nullptr)
        {
            queue1[t] = pp[mid - 1] -> left -> data;
            t++;
//            cout << "l" << t << endl;
        }
        if(pp[mid - 1] -> right != nullptr)
        {
            queue1[t] = pp[mid - 1] -> right -> data;
            t++;
//            cout << "l" << t << endl;
        }
        cout << queue1[0] << " ";
        for(int j = 0; j < t; j++)
        {
            queue1[j] = queue1[j + 1];
        }
        t--;
    }
    
//    cout << queue1[0] << queue1[44];
    
    
    
    
    return 0;
}
