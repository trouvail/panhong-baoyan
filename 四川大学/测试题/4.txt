#include <iostream>
#include <iomanip>

using namespace std;

struct TreeNode
{
    int data;        //数据
    TreeNode* left;    //指向左孩子节点的指针
    TreeNode* right;   //指向右孩子节点的指针
 
    TreeNode(int dat, TreeNode* lft = nullptr, TreeNode* rig = nullptr):data(dat), left(lft), right(rig) {}
};

struct stu
{
    string name;
    int a;
    int b;
    int c;
    int all;
    stu(string na, int a1, int b1, int c1, int a2):name(na), a(a1), b(b1), c(c1), all(a2) {}
};

void inorderTraversal(TreeNode* root)
{
    //根节点为空，直接返回
    if (nullptr == root)
    {
        return;
    }
    //1）遍历左子树
    inorderTraversal(root -> left);
    //2）输出
    cout << root -> data << endl;
    //3）遍历右子树
    inorderTraversal(root->right);
    return;
}




int main()
{
    stu* pp[100];
//    string a;
//    int b;
//    cin >> a >> b;
    
//    string a = "zzz";
//    string b = "pp";
//    
//    if(a < b)
//    {
//        cout << a;
//    }
//    if(a > b)
//    {
//        cout << b;
//    }
    
    int n;
    cin >> n;
    for(int i = 0; i < n; i++)
    {
        string a;
        int b, c, d, e;
        cin >> a >> b >> c >> d;
        e = b + c + d;
        
        pp[i] = new stu(a, b, c, d, e);
    }
    for(int i = n - 1; i >= 0; i--)
    {
        for(int j = 0; j < i; j++)
        {
            if(pp[j] -> all < pp[j + 1] -> all)
            {
                stu* mid;
                mid = pp[j + 1];
                pp[j + 1] = pp[j];
                pp[j] = mid;
            }
            if(pp[j] -> all == pp[j + 1] -> all)
            {
                if(pp[j] -> name > pp[j + 1] -> name)
                {
                    stu* mid;
                    mid = pp[j + 1];
                    pp[j + 1] = pp[j];
                    pp[j] = mid;
                }
            }
        }
    }
    for(int i = 0; i < n; i++)
    {
        cout << pp[i] -> name << endl;
    }
    
    
    
    return 0;
}
